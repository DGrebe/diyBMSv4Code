name: PlatformIO CI

on:
  push:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:       
    - uses: actions/checkout@v2
    - name: Cache pip
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: ${{ runner.os }}-pip-
        
    - name: Cache PlatformIO
      uses: actions/cache@v2
      with:
        path: ~/.platformio
        key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}

    - name: Set up Python
      uses: actions/setup-python@v2
      
    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade platformio
        
    - name: Build code for modules
      run: pio run --project-dir=./ATTINYCellModule --project-conf=./ATTINYCellModule/platformio.ini
      
    - name: Build code for controller
      run: pio run --project-dir=./ESPController --project-conf=./ESPController/platformio.ini

    - name: ZIP output for release
      run: |
        zip --junk-paths release.zip ./ESPController/.pio/build/esp8266_d1minipro/diybms_controller_firmware_espressif8266_esp8266_d1minipro.bin
        zip --junk-paths release.zip ./ATTINYCellModule/.pio/build/attiny841_V400/*.hex
        zip --junk-paths release.zip ./ATTINYCellModule/.pio/build/attiny841_V410/*.hex
        zip --junk-paths release.zip ./ATTINYCellModule/.pio/build/attiny841_V420/*.hex
        zip --junk-paths release.zip ./ATTINYCellModule/.pio/build/attiny841_V420_SWAPR19R20/*.hex
        zip --junk-paths release.zip ./ATTINYCellModule/.pio/build/attiny841_V421/*.hex
      
    - name: Build File System Image for ESP8266
      run: pio run --project-dir=./ESPController --target buildfs --environment esp8266_d1minipro
      
    - name: Build File System Image for esp32
      run: pio run --project-dir=./ESPController --target buildfs --environment esp32-devkitc
      
    - name: ZIP output for release
      run: |
        zip --junk-paths release.zip ./ESPController/.pio/build/esp8266_d1minipro/diybms_controller_filesystemimage_espressif8266_esp8266_d1minipro.bin

    - name: Publish Compile Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: DIYBMS-Compiled-Code
        path: ./release.zip
        if-no-files-found: error

    - name: Create Release Files on MASTER branch only
      id: create_release
      uses: actions/create-release@v1
      if: github.ref == 'refs/heads/master'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          Automatically generated release
        draft: false
        prerelease: false

    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      if: github.ref == 'refs/heads/master'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} 
        asset_path: .
        asset_name: release.zip
        asset_content_type: application/zip
